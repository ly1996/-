Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]

一天可能有三种状态，buy,sell,rest
我们用rest[i]代表到第i天最后一个操作是rest的序列能得到的最大值
我们用sell[i]代表到第i天最后一个操作是sell的序列能得到的最大值
我们用buy[i]代表到第i天最后一个操作是buy的序列能得到的最大值

显然:
rest[i] = max(sell[i-1], buy[i-1], rest[i-1])
因为rest[I]代表第i天无操作，那么最大值由前一天的三种状态下的最大值决定
buy[i] = max(rest[i-1] - price, buy[i-1])
这个公式的意思是：如果最后一个买操作是第i天，那么代表到i-1天最后一个操作是rest,rest[i-1] - price；如果最后一个买操作是在前i-1天，那么自然就是buy[i-1]
sell[i] = max(buy[i-1] + price, sell[i-1])这个公式的意思是：如果最后一个卖操作是第i天，那么代表到i-1天最后一个操作是buy, buy[i-1] + price；如果最后一个卖操作是在前i-1天，那么自然就是sell[i-1]

而显然rest[i] = sell[i-1]

所以buy[I] = max(sell[i-2] - price , buy[I-1])
sell[I] = max(buy[I-1] + price , sell[I-1])