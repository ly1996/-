There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.

问题分析：
其实就是构建一个图，然后对图进行深度优先遍历，看是否存在环。
我用一个二维vector表示图，每个index对应的vector里面包含了所有该节点对应的下一个节点。
我们用一个visit数组记录当前状态下每个节点是否被访问过。
我们遍历每个结点，看是否存在环。
每次先将visit[I]设为true，然后接着递归访问当前节点的每一个下一个结点，如果返回说存在环（false），那么直接返回false。如果顺利遍历结束，那么将visit[I]设为false，同时山区当前节点的所有下一个结点（也就是当前结点的出度设为0）。返回true。这样使得每条边只需要被遍历一遍。