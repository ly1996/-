Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

主要就是设计一个结点的数据结构
我的设计如下：
class TrieNode {
public:
    // Initialize your data structure here.
    TrieNode() : nodes(26, NULL), isWord(false){
    }
    vector<TrieNode*> nodes;
    bool isWord;
    //char ch;
};

用一个长度为26的vector数组存储当前字母后面接的字母的情况。isWord表明当前节点是否是一个字的结尾。
当insert一个词时，比如apple，就创建五个节点插在根结点（不代表任意的开头）后面
Root -> <a,false> -> <p,false> -> <p,false> -> <l,false> -> <e,true>
当插入app时，不需要加入新的节点，只需要把第二个<p,false>改成<p,true> 
插入时，沿着树遍历，遇到没有的节点就生成
查找时，沿着树遍历，遇到没有的节点就返回false。如果都有，那检查当前节点是否为isWord