Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero.

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Note:

Both dividend and divisor will be 32-bit signed integers.
The divisor will never be 0.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.

问题描述：
（处理符号问题）我们可以用(dividend ^ divisor) >> 31来得知两者是同号还是异号。 ^：异或
（处理结果溢出问题）只有-2147483648和-1相除会得到溢出的结果，返回2147483647
dividend = divisor * result
而result可以用2^i的和表示.
所以我们可以从小到大减去divisor, divisor<<1, divisor<<2…直到dividend剩余部分 < divisor<<i。
而我们需要重复上面的循环知道dividend剩余部分 < divisor。