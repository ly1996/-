Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.

问题分析：
对于二叉搜索树，它的性质是：如果进行中序遍历，那么遍历得到的数组递增。
所以我们可以对二叉搜索树进行中序遍历，然后遍历当前元素时，与前一个元素的值做比较，如果<=前一个值，返回false。

中序遍历需要stack
首先压入root, root->left … root -> left … -> left
然后出栈，比较大小，将出栈元素的right , right -> left , … , right -> left … -> left压栈