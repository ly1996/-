You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.

问题分析：
一个典型的动态规划问题。
迭代求解的问题是：
前I个house能偷的最大金额是多少？
count[0] = 0;
count[1] = nums[1]
而我们可以把问题分解成：偷不偷第I间house
如果偷，那么可能偷的最大金额是nums[i] + count[i-2]
如果不偷，那么可能偷的最大金额是count[i-1]
我们比较两者，将较大值赋给count[i]
最后我们返回count[len]。当然，我们不需要记录所有的count[0...n]，只需要记录当前位置的前两个位置的值就行了