Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:

Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"
Note:

If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.

问题分析：
要求时间复杂度是O(n)，说明只能扫描数组固定的次数。

我们可以记录两个指针：
Start：子字符串开始
End：字符串结束，也就是当前访问的s中的字符的位置
start = 0，end = 0

记录两个数组：
tchars:t中字符对应的出现次数
schars:s中字符对应的出现次数

types_of_char：t中字符的种类
types_of_char_now：start到end的子字符串的字符种类（只包含t中出现的字符）

程序不断重复下面两个循环：
（a）我们不断扫描s中的字符ch，指针为end：
（1）如果字符不在t中（tchars[ch] == 0），则end++继续扫描
（2）如果字符在t中，schars[ch]++；如果schars[ch] == tchars[ch]，说明当前子字符串中ch的数目达到了t中对应字符的数目，types_of_char_now++。如果types_of_char_now== types_of_char，说明当前子字符串包含了字符串t，那我们就可以跳出扫描s的循环了。
（b）通过后移start指针确定子字符串真正的开始。我们不断扫描s中的字符ch，指针为start：
（1）如果字符不在t中（tchars[ch] == 0），则start++继续扫描
（2）如果字符在t中，schars[ch]—-；如果当前的schars[ch]<tchars[ch],说明子字符串一定得包含当前字符，当前字符就是子字符串真正的开始。然后计算长度；如果当前的schars[ch]>=tchars[ch]，则说明子字符串不必包含当前字符，start可以继续后移。

