Given a binary tree

struct TreeLinkNode {
  TreeLinkNode *left;
  TreeLinkNode *right;
  TreeLinkNode *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:

You may only use constant extra space.
Recursive approach is fine, implicit stack space does not count as extra space for this problem.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).
Example:

Given the following perfect binary tree,

     1
   /  \
  2    3
 / \  / \
4  5  6  7
After calling your function, the tree should look like:

     1 -> NULL
   /  \
  2 -> 3 -> NULL
 / \  / \
4->5->6->7 -> NULL

思路：
我们假设已经有一层排列好的节点（next已经填充完毕了），那么我们如何构造下一层：
从这一层的开始节点开始，保存该节点的左节点作为下一层的开始
对于每一个节点而言，将prev的next指向左节点，将左节点的next指向右节点，更新prev节点为右节点，然后遍历该节点的next知道其为NULL。