Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

解析：
用sum代表遍历到当前值时，包含当前值的连续数组的最大和。
maxSum代表返回值。
从左到右遍历数组：
（1）如果遍历完前一个元素求到的sum为负数。那么包含当前元素的连续数组的和最大就是当前值。不然，则最大和是sum+nums[i]
（2）比较sum和maxSum，修改maxSum的值。

既然要求用分治法。
那么就把数组分成左右数组，分别求最大和。然后再从中间的值向左右扩展得到包含中间元素的连续数组的最大和，