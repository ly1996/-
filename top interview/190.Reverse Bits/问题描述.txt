Reverse bits of a given 32 bits unsigned integer.

 

Example 1:

Input: 00000010100101000001111010011100
Output: 00111001011110000010100101000000
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
Example 2:

Input: 11111111111111111111111111111101
Output: 10111111111111111111111111111111
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10101111110010110010011101101001.
 

Note:

Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above the input represents the signed integer -3 and the output represents the signed integer -1073741825.

问题分析：
其实这个问题分为两个子问题：
（1）如何得到n各个位置上是1还是0.
方法：每次计算n&1，如果为1则n的末尾为1，否则为0.我们只需要不断将n右移就可以计算每一位的值。
（2）如果将对应的值赋予result。result[31]=n[0]。所以我们利用一个迭代的式子来计算result.每次计算得到一个n的末尾值后，result = (result << 1) + 末尾值。这样我们可以看到，result对应位置上的值正好正确。result[31]正好对应n[0]左移31次。result[30]正好对应n[1]左移30次。