Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

仍然是二叉搜索的思路。但是现在不能像原来一样判断左右
得到midnum之后
（1）如果target == midnum，直接返回mid。
（2）如果midnum <= nums[right]。说明nums[mid...right]是有序的，我们判断target是否在这个区间。
	（a）如果在：left = mid + 1
	（b）否则：right = mid - 1
（2）如果midnum >= nums[left]。说明nums[left...mid]是有序的，我们判断target是否在这个区间。
	（a）如果在：right = mid - 1
	（b）否则：left = mid + 1
如果跳出循环（left > right），返回-1.说明找不到。